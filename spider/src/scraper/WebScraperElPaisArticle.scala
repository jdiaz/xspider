/**
 * This file is partiallty generated. Only make modifications between
 * BEGIN MANUAL SECTION and END MANUAL SECTION designators.
 * 
 * This file is was generated by ./sc scraper script command.
 */
package scraper

import collection.JavaConverters._
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element

import common.CountryType._
import crawler.CrawlerTypes._
/** BEGIN MANUAL SECTION */
/** END MANUAL SECTION */

object WebScraperElPaisArticle extends TWebScraper {

  def apply(
    page: WebPage,
    linkText: String,
    link: URL,
    html: String,
  ): Option[WebArticle] = {
    val doc = parseHTMLDocument(html)
    /** BEGIN MANUAL SECTION */
    //val baseURL = page.url.split("/tecnologia")(0).strip
    val section = if (page.url.contains("tecnologia")) {
      "tecnologia"
    } else if (page.url.contains("america") && page.url.contains("economia")) {
      "america/economia"
    } else if (page.url.contains("economia")) {
      "economia"
    }else {
      // default to: tecnologia
      "tecnologia"
    }
    val baseURL = s"https://${getBaseDomain(page.url)}/$section"
    val author = doc.select("a.a_aut_n").text().strip
    val title = doc.select("header h1").text().strip
    val img = if (!doc.select(".foto-imagen").attr("src").isEmpty) {
      doc.select(".foto-imagen img").attr("src").strip
    } else {
      doc.select(".lead_art img").attr("src").strip
    }
    val image = if (!img.isEmpty) Some(img) else None
    val outBoundLinks = doc.select(".article_body")
    .asScala
    .map(anchorTag => {
      val href = anchorTag.attr("href").strip()
      val url = if (href.startsWith("http")) {
        href
      } else {
        s"$baseURL$href"
      }
      (anchorTag.text(), url)
    })
    .filter(pair => !pair._1.isEmpty && !pair._2.isEmpty)
    .toSet

    val text = doc.select("body").text.strip
    val longDateString = if (!doc.select("a.a_ti").text.isEmpty) {
      doc.select("a.a_ti").text.strip()
    } else if (!doc.select(".articulo-datos a").text.isEmpty) {
      doc.select(".articulo-datos a").text.strip
    } else {
      ""
    }
    val datePublished = scrapeSpanishDate(longDateString)

    val webArticle = WebArticle(
      page,
      linkText,
      link,
      title,
      Some(author),
      datePublished,
      outBoundLinks,
      image,
      text,
    )
    Some(webArticle)
    /** END MANUAL SECTION */
  }
  /** BEGIN MANUAL METHOD SECTION */
  /** END MANUAL METHOD SECTION */
}

