/**
 * This file is partiallty generated. Only make modifications between
 * BEGIN MANUAL SECTION and END MANUAL SECTION designators.
 * 
 * This file is was generated by ./sc scraper script command.
 */
package scraper

import utest._
import scala.io.Source
import common.CountryType._
import common.CountryType
import common.SourceType._
import common.SourceType
import common.TestUtils
import crawler.CrawlerTypes._
/** BEGIN MANUAL SECTION */
/** END MANUAL SECTION */

object WebScraperElPaisArticleTests extends TestSuite with TestUtils {
  
  var html = ""

  val ElPaisURL = "https://elpais.com/tecnologia/"
  /** BEGIN MANUAL SECTION */
  /** END MANUAL SECTION */

  override def utestBeforeEach(path: Seq[String]): Unit = {
    if (html.isEmpty) {
      val htmlStream = getClass.getResourceAsStream("/ElPais.html.test")
      html = Source.fromInputStream(htmlStream).getLines.mkString
    }
  }

  def tests = Tests {
    test("Web Scrape ElPais") {
      /** BEGIN MANUAL SECTION */
      val linkText = "¿Al pueblo de vacaciones o a teletrabajar? Pistas para una mejor conexión desde zonas rurales"
      val linkURL = "https://elpais.com/tecnologia/2020-07-27/al-pueblo-de-vacaciones-o-a-teletrabajar-pistas-para-una-mejor-conexion-desde-zonas-rurales.html"
      val thumbURL = "https://imagenes.elpais.com/resizer/HeQTzxwLo18l9zLQOwckW6RjFtg=/1500x0/cloudfront-eu-central-1.images.arcpublishing.com/prisa/7HBJ23S644IG2TJX7CETQCU4YQ.jpg"
      val author = "José Mendiola Zuriarrain"
      val page = WebPage(ElPaisURL, CountryType.ESPANA, SourceType.EL_PAIS)
      val maybeArticle: Option[WebArticle] = WebScraperElPaisArticle(
        page,
        linkText,
        linkURL,
        html,
      )
      maybeArticle match {
        case Some(a: WebArticle) => testArticle(
          a,
          page,
          linkText,
          linkURL,
          thumbURL,
          ArticleDate(27,7,2020),
          author,
        )
        case _ => assert(false)
      }
      /** END MANUAL SECTION */
    }
  }
  /** BEGIN MANUAL SECTION */
  private def testArticle(
    a: WebArticle,
    origin: WebPage,
    linkText: String,
    linkURL: URL,
    thumb: URL,
    date: ArticleDate,
    author: String,
  ): Unit = {
    assert(a.title == linkText)
    assert(a.origin == origin)
    assert(a.originLinkText == linkText)
    assert(a.fullyQualifiedLink == linkURL)
    assert(checkOptionalMatch(a.image, thumb))
    assert(checkOptionalMatch(a.datePublished, date))
    assert(a.outBoundLinks.size > 0)
    assert(a.text.length > 0)
    assert(!a.text.contains("<html>"))
    assert(!a.text.contains("<body>"))
    assert(!a.text.contains("<script>"))
    assert(checkOptionalMatch(a.author, author))
    a.outBoundLinks.foreach(linkPair => {
      val (text, url) = linkPair
      assert(!text.isEmpty)
      assert(url.startsWith("http"))
    })
  }
  /** END MANUAL SECTION */
}

